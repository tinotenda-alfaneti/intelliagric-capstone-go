basePath: /api
definitions:
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.loginReq:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@intelliagric.com
    name: API Support
    url: http://www.intelliagric.com/support
  description: This is the API documentation for IntelliAgric.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: IntelliAgric API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.loginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Log in a user
      tags:
      - Users
  /logout:
    post:
      description: Logs out a user
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Log out a user
      tags:
      - Users
  /signup:
    post:
      consumes:
      - application/json
      description: Creates a new user account and stores it in the database
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Sign up a new user
      tags:
      - Users
  /users:
    get:
      consumes:
      - application/json
      description: Fetches all users from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Creates a new user and stores it in the database
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a user
      tags:
      - Users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a user by ID from the database
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get a user by ID
      tags:
      - Users
swagger: "2.0"
